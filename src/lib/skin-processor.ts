import { createCanvas, loadImage } from 'canvas'
import { gzipSync, unzipSync } from 'zlib'

const longToByteArray = (long: number) => {
    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0]

    for (var index = 0; index < byteArray.length; index++) {
        var byte = long & 0xff
        byteArray[index] = byte
        long = (long - byte) / 256
    }

    return byteArray
}

const byteArrayToLong = function (byteArray: number[]) {
    var value = 0
    for (var i = byteArray.length - 1; i >= 0; i--) {
        value = (value * 256) + byteArray[i]
    }

    return value
}

const maskPixels =
    `1000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000001111111111111111000000000000000011111111
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
1111000000001111111100000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
1111000000001111111100000000000000001111111100000000111111111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
0000000000000000000000000000000000000000000000000000000011111111
1111000000001111111100000000111111110000000011111111000000011111
1111000000001111111100000000111111110000000011111111000000011111
1111000000001111111100000000111111110000000011111111000000011111
1111000000001111111100000000111111110000000011111111000000011111
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000`.replace(/\n/g, '').split('').map(x => {
        const b = !!parseInt(x)
        return b ? [255, 255, 255, 255] : [0, 0, 0, 0]
    }).flat()

export const availablePixels = maskPixels.filter((x, i) => x > 0 && i % 4 != 3).length - 8

async function encode(skinData: string, data: number[]): Promise<string> {
    const canvas = createCanvas(64, 64)
    const ctx = canvas.getContext('2d')
    const skinImage = await loadImage(skinData)
    ctx.drawImage(skinImage, 0, 0)

    const overlayImage = ctx.getImageData(0, 0, 64, 64)
    const overlayImageData = overlayImage.data

    const bytes = [...longToByteArray(data.length), ...data]
    let index = 0
    for (let i = 0; i < maskPixels.length; i += 1) {
        if (maskPixels[i] < 128) {
            continue
        }
        if (i % 4 == 3) {
            overlayImageData[i] = 255
            continue
        }
        if (index >= bytes.length) {
            continue
        }
        overlayImageData[i] = bytes[index]
        index += 1
    }
    ctx.putImageData(overlayImage, 0, 0)
    const encodedSkin = canvas.toDataURL()
    return encodedSkin
}

async function decode(skinData: string): Promise<number[]> {
    const canvas = createCanvas(64, 64)
    const ctx = canvas.getContext('2d')
    const skinImage = await loadImage(skinData)
    ctx.drawImage(skinImage, 0, 0)
    const pixels = ctx.getImageData(0, 0, 64, 64)
    let data = []
    let index = 0
    let readLength = 9
    for (let i = 0; i < pixels.data.length; i += 1) {
        if (index >= readLength) {
            break
        }
        if (i % 4 == 3) {
            continue
        }
        if (maskPixels[i] < 128) {
            continue
        }
        if (index == 8) {
            readLength = 8 + byteArrayToLong(data)
            data = []
        }
        data.push(pixels.data[i])
        index += 1
    }
    return data
}

export function zip(data: any): number[] {
    const text = encodeURIComponent(JSON.stringify(data))
    const compressed = gzipSync(text)
    const bytes = Array.from(compressed)
    return bytes
}

export function unzip(data: number[]): any {
    const text = unzipSync(Buffer.from(data))
    const decodedData = JSON.parse(decodeURIComponent(text.toString()))
    return decodedData
}

export async function encodeJson(skinData: string, data: any): Promise<string> {
    let text = encodeURIComponent(JSON.stringify(data))
    const compressed = gzipSync(text)
    const bytes = Array.from(compressed)
    const encodedSkin = await encode(skinData, bytes)
    return encodedSkin
}

export async function decodeJson(skinData: string): Promise<any> {
    const data = await decode(skinData)
    const text = unzipSync(Buffer.from(data))
    const decodedData = JSON.parse(decodeURIComponent(text.toString()))
    return decodedData
}